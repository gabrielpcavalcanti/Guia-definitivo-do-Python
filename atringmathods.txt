casefold(self, /)
Retorna uma versão da string adequada para comparações sem diferenciação de maiúsculas e minúsculas.

center(self, width, fillchar=' ', /)
Retorna uma string centralizada com o comprimento especificado.

O preenchimento é feito usando o caractere especificado (o padrão é um espaço).

Os argumentos opcionais start e end são interpretados conforme a notação de fatia (slice).

encode(self, /, encoding='utf-8', errors='strict')
Codifica a string usando o codec registrado para a codificação especificada.

encoding: A codificação na qual a string será codificada.

errors: O esquema de tratamento de erros a ser usado para erros de codificação.
O padrão é 'strict', o que significa que erros de codificação geram um UnicodeEncodeError.
Outros valores possíveis são 'ignore', 'replace' e 'xmlcharrefreplace', além de qualquer nome registrado com codecs.register_error que possa lidar com UnicodeEncodeErrors.

endswith(self, suffix[, start[, end]], /)
Retorna True se a string terminar com o sufixo especificado, False caso contrário.

suffix: Uma string ou uma tupla de strings a serem verificadas.

start: Posição inicial opcional. Padrão: início da string.

end: Posição final opcional. Padrão: fim da string.

expandtabs(self, /, tabsize=8)
Retorna uma cópia da string onde todos os caracteres de tabulação são substituídos por espaços.

Se tabsize não for especificado, assume-se um tamanho de tabulação de 8 caracteres.

find(self, sub[, start[, end]], /)
Retorna o menor índice em S onde a substring sub é encontrada, de modo que sub esteja contida dentro de S[start:end].

Os argumentos opcionais start e end são interpretados conforme a notação de fatia (slice).
Retorna -1 se a substring não for encontrada.

**format(self, /, *args, kwargs)
Retorna uma versão formatada da string, usando substituições de args e kwargs.
As substituições são identificadas por chaves ({} e {} dentro da string).

format_map(self, mapping, /)
Retorna uma versão formatada da string, usando substituições do mapeamento fornecido.
As substituições são identificadas por chaves ({} e {}).

index(self, sub[, start[, end]], /)
Retorna o menor índice em S onde a substring sub é encontrada, de modo que sub esteja contida dentro de S[start:end].

Os argumentos opcionais start e end são interpretados conforme a notação de fatia (slice).
Levanta um erro ValueError se a substring não for encontrada.

isalnum(self, /)
Retorna True se a string for alfanumérica, False caso contrário.

Uma string é considerada alfanumérica se todos os seus caracteres forem letras ou números e se houver pelo menos um caractere na string.

isalpha(self, /)
Retorna True se a string contiver apenas caracteres alfabéticos, False caso contrário.

isascii(self, /)
Retorna True se todos os caracteres da string forem caracteres ASCII, False caso contrário.

Os caracteres ASCII possuem pontos de código no intervalo U+0000-U+007F.
A string vazia também é considerada ASCII.

isdecimal(self, /)
Retorna True se a string for composta apenas por caracteres decimais, False caso contrário.

isdigit(self, /)
Retorna True se a string contiver apenas caracteres numéricos, False caso contrário.

isidentifier(self, /)
Retorna True se a string for um identificador válido no Python, False caso contrário.

Para verificar se uma string é uma palavra reservada do Python, use keyword.iskeyword(s).

islower(self, /)
Retorna True se a string estiver totalmente em letras minúsculas, False caso contrário.

isnumeric(self, /)
Retorna True se a string contiver apenas caracteres numéricos, False caso contrário.

isprintable(self, /)
Retorna True se a string contiver apenas caracteres imprimíveis, False caso contrário.

isspace(self, /)
Retorna True se a string contiver apenas espaços em branco, False caso contrário.

istitle(self, /)
Retorna True se a string estiver no formato de título, False caso contrário.

isupper(self, /)
Retorna True se a string contiver apenas caracteres maiúsculos, False caso contrário.

join(self, iterable, /)
Concatena um número qualquer de strings.

A string na qual o método foi chamado é inserida entre cada string dada.
O resultado é retornado como uma nova string.

Exemplo:

python
Copiar
Editar
'.'.join(['ab', 'pq', 'rs'])  # Retorna 'ab.pq.rs'
ljust(self, width, fillchar=' ', /)
Retorna uma string justificada à esquerda com o comprimento especificado.

O preenchimento é feito usando o caractere especificado (o padrão é um espaço).

lstrip(self, chars=None, /)
Retorna uma cópia da string sem os espaços em branco à esquerda.

Se chars for fornecido e não for None, remove os caracteres especificados em chars.

partition(self, sep, /)
Divide a string em três partes usando o separador fornecido.

Se o separador for encontrado, retorna uma tupla com a parte antes do separador, o separador em si e a parte depois dele.
Se o separador não for encontrado, retorna uma tupla contendo a string original e duas strings vazias.

removeprefix(self, prefix, /)
Retorna uma string sem o prefixo especificado, se presente.

removesuffix(self, suffix, /)
Retorna uma string sem o sufixo especificado, se presente.

replace(self, old, new, /, count=-1)
Retorna uma cópia da string substituindo todas as ocorrências de old por new.

count: Número máximo de substituições a serem feitas. O padrão -1 significa substituir todas as ocorrências.

rfind(self, sub[, start[, end]], /)
Semelhante a find(), mas retorna o maior índice onde a substring foi encontrada.

rindex(self, sub[, start[, end]], /)
Semelhante a index(), mas retorna o maior índice onde a substring foi encontrada.

rjust(self, width, fillchar=' ', /)
Retorna uma string justificada à direita com o comprimento especificado.

rstrip(self, chars=None, /)
Retorna uma cópia da string sem os espaços em branco à direita.

split(self, /, sep=None, maxsplit=-1)
Divide a string em uma lista de substrings usando um separador.

swapcase(self, /)
Inverte maiúsculas e minúsculas na string.

zfill(self, width, /)
Preenche a string numérica com zeros à esquerda até atingir o comprimento especificado.